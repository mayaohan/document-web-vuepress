(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{491:function(v,_,l){"use strict";l.r(_);var i=l(1),s=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[v._v("#")]),v._v(" 安全")]),v._v(" "),_("h2",{attrs:{id:"xss"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[v._v("#")]),v._v(" XSS")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("什么 是 XSS 攻击？")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("xss 全称是 cross Site  Scripting (跨站脚本)")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("xss 攻击 是 指 浏览器中执行的 恶意脚本 (无论是 跨域和 同域), 从而 拿到用户的 信息 并 进行操作")])]),v._v(" "),_("li",[_("p",[v._v("这些操作 一般可以 完成 一下的 事情")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("窃取 cookie")])]),v._v(" "),_("li",[_("p",[v._v("监听用户行为, 比如 输入 账号密码后 直接 发送到 黑客的 服务器")])]),v._v(" "),_("li",[_("p",[v._v("修改 DOM 伪造 登录表单")])]),v._v(" "),_("li",[_("p",[v._v("在页面中 生成 浮窗 广告")])])])]),v._v(" "),_("li",[_("p",[v._v("xss  攻击 的 实现 方式")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("存储型")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("顾名思义 就是 把 恶意脚本存储 起来, 确实, 存储型的 XSS 将 脚本 存储到了 服务端的 数据库")]),v._v(" "),_("p",[v._v("然后在 客户端 执行这些脚本, 从而  达到 攻击的 效果")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("常见的 场景")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("是留言 评论区 提交 一段 脚本代码, 如果 前后端 没有做好 转义的 工作, 那 评论 内容 被存储到了")]),v._v(" "),_("p",[v._v("数据库 中,  在 页面 渲染 过程中, *"),_("strong",[v._v("直接执行")]),v._v(", 相对于 执行了 一段 未知 逻辑的 代码, 是非常恐怖的")])])])])])])])]),v._v(" "),_("li",[_("p",[v._v("反射型")]),v._v(" "),_("ul",[_("li",[v._v("反射型 xss  指的是 恶意脚本 作为 网络请求的 一部分")])]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('  http://sanyuan.com?q=<script>alert("你完蛋了")<\/script>\n\n')])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("ul",[_("li",[v._v("这样 服务器  就拿到了 q 参数,  然后 将 内容 返回给 浏览器 端,  浏览器 将这些 内容 作为 HTML 的 一部分 解析。")])]),v._v(" "),_("p",[v._v("发现 是 一个 脚本, 直接执行,  这样 就被 攻击了。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("之所以叫 它  反射型, 是因为 恶意脚本  是 通过 *"),_("strong",[v._v("作为 网络请求的 参数")]),v._v("  , 经过 服务器, 然后在反射 到 HTML 文档中")]),v._v(" "),_("p",[v._v("执行解析. 和 存储型 不一样的 是, *"),_("strong",[v._v("服务器并不会 存储 这些 恶意脚本.")])])])])]),v._v(" "),_("li",[_("p",[v._v("文档型")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("文档型的 XSS 攻击 并不会 经过 服务器, 而是 作为 中间人的 角色, 在 数据传输的 过程 *"),_("strong",[v._v("劫持")]),v._v(" 到 网络流量包,")]),v._v(" "),_("p",[v._v("然后  *"),_("strong",[v._v("修改 里面的html 文档")])])]),v._v(" "),_("li",[_("p",[v._v("这样的 劫持方式 包括：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("wifi 路由器 劫持")])]),v._v(" "),_("li",[_("p",[v._v("本地恶意 软件")])])])])])])])])])]),v._v(" "),_("li",[_("p",[v._v("防范措施")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("共同特点 就是 让恶意 脚本 在 浏览器 中 执行")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("一个信念")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("不要相信 任何用户的 输入")])]),v._v(" "),_("li",[_("p",[v._v("无论是 前端 还是 后端, 都要对 用户 的 输入 进行 转码 或者 过滤")])])]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("<script>alert('你完蛋了')<\/script>\n\n 转码后 变成:\n\n&lt;script&gt;alert(&#39;你完蛋了&#39;)&lt;/script&gt;\n\n// 这样的代码在 html 解析的过程中是无法执行的\n\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br"),_("span",{staticClass:"line-number"},[v._v("8")]),_("br")])]),_("ul",[_("li",[_("p",[v._v("当然也可以利用关键词过滤的方式，将 script 标签给删除")])]),v._v(" "),_("li",[_("p",[v._v("结果 啥 也没有了")])])])]),v._v(" "),_("li",[_("p",[v._v("两个利用")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("利用 CSP")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("CSP, 即浏览器中的 内容安全 策略,")])]),v._v(" "),_("li",[_("p",[v._v("它的 核心思想就是： *"),_("strong",[v._v("服务器 决定 浏览器 加载 哪些资源")])])]),v._v(" "),_("li",[_("p",[v._v("具体可以完成 一下的 功能")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("限制 其他域下的 资源加载")])]),v._v(" "),_("li",[_("p",[v._v("禁止 向其他的 域 提交数据")])]),v._v(" "),_("li",[_("p",[v._v("提供上报 机制, 能帮助 我们 发现 xss 攻击")])])])])])]),v._v(" "),_("li",[_("p",[v._v("利用 HttpOnly")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("很多的 xss 脚本 是 用来 窃取 Cookie, 而设置 Cookie 的 HttpOnly 属性后，")])]),v._v(" "),_("li",[_("p",[v._v("javascript 便 无法 读取 Cookie 的 值")])]),v._v(" "),_("li",[_("p",[v._v("cookie 的 特点(????)")])])])])])])])])])])])])]),v._v(" "),_("h2",{attrs:{id:"csrf"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[v._v("#")]),v._v(" CSRF")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("什么是CSRF攻击？")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("CSRF(cross-site request forgery)， 即 跨站 请求 伪造, 指的是 黑客诱导 用户 点击链接, 打开 黑客的 网站,")]),v._v(" "),_("p",[v._v("然后 黑客 利用 *"),_("strong",[v._v("用户 目前的 登陆状态")]),v._v("  发起 跨站请求")])]),v._v(" "),_("li",[_("p",[v._v("举个例子")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("你在 某个论坛 点击了 黑客 精心挑选的 小姐姐的 图片, 你 点击后， 进入了 一个新的 页面")])]),v._v(" "),_("li",[_("p",[v._v("那么恭喜 你 你被攻击")])]),v._v(" "),_("li",[_("p",[v._v("你可能 会比较 好奇, 怎么突然 就 被攻击了呢？ 接下来 我们来拆解 一下 当你 点击了 链接 之后, 黑客在背后做了什么事情")])])])]),v._v(" "),_("li",[_("p",[v._v("自动发起 GET 请求")])])]),v._v(" "),_("ul",[_("li",[v._v("黑客网页里面可能有一段这样的代码:")])]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('<img src="https://xxx.com/info?user=hhh&count=100"></img>\n\n')])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("ul",[_("li",[_("p",[v._v("进入 页面 后 自动发送 get 请求, 值得注意的是, 这个请求 会 自动带上 xxx.com 的 cookie 信息(假设 你已经在 xxx.com 登陆过)")])]),v._v(" "),_("li",[_("p",[v._v("假如 服务器端 没有 相应的 验证机制, 他可能 认为 发请求的是 一个 用户, 因为 携带了 相应的 cookie, 然后去 进行 相应的 各种操作")]),v._v(" "),_("p",[v._v("可以 是 转账 汇款 以及其它的 恶意操作")])])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("自动发 POST 请求")]),v._v(" "),_("ul",[_("li",[v._v("黑客可能自己填了一个表单，写了一段自动提交的脚本")])]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('<form id=\'hacker-form\' action="https://xxx.com/info" method="POST">\n     <input type="hidden" name="user" value="hhh" />\n\n      <input type="hidden" name="count" value="100" />\n\n</form>\n\n <script>document.getElementById(\'hacker-form\').submit();<\/script>\n')])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br"),_("span",{staticClass:"line-number"},[v._v("8")]),_("br")])]),_("ul",[_("li",[v._v("同样也会 携带 相应的 用户的 cookie 信息, 让服务器 误以为 是 一个 正常的 用户在 操作, 让各种 恶意的 操作变成 可能")])])]),v._v(" "),_("li",[_("p",[v._v("诱导 点击 发送 GET 请求")]),v._v(" "),_("ul",[_("li",[v._v("在黑客的网站上，可能会放上一个链接，驱使你来点击:")])]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('  <a href="https://xxx.com/info?user=hhh&count=100" target="_blank"></a>\n\n')])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("ul",[_("li",[v._v("点击后, 自动发送 get 请求, 接下来 和  自动 发送 GET 请求 部分 同理")])])]),v._v(" "),_("li",[_("p",[v._v("这就是 CSRF 攻击的 原理, 和 XSS 攻击对比, csrf 攻击 不需要 将 恶意的代码 注入到 用户当前 页面的 html 中, 而是")]),v._v(" "),_("p",[v._v("*"),_("strong",[v._v("跳转到新的 页面")]),v._v(",  利用 服务器的")]),v._v(" "),_("p",[v._v("*** 验证漏洞** 和")]),v._v(" "),_("p",[v._v("*** 用户之前 的 登陆状态**  来模拟 用户 进行操作")])])])]),v._v(" "),_("li",[_("p",[v._v("防范措施")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("利用Cookie的SameSite属性")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("CSRF 攻击 中最重要的 一环 就是")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("自动 发送 目标站点下的 Cookie, 然后 就是 这一份 Cookie 模拟了 用户的身份")])]),v._v(" "),_("li",[_("p",[v._v("Cookie 中 有一个 关键性的 字段, 可以 对请求中的 Cookie 的携带 做一些限制")])]),v._v(" "),_("li",[_("p",[v._v("SameSite")])]),v._v(" "),_("li",[_("p",[v._v("SameSite 可以设置为 三个值： strict， Lax, 和 None")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("strict 模式, 浏览器完全 禁止 第三方 请求携带 Cookie.")]),v._v(" "),_("ul",[_("li",[v._v("比如 abc.com 网站 只能在 abc.com 域名中请求才可以带上 cookie， 在 其他的 网站 请求 都不能")])])]),v._v(" "),_("li",[_("p",[v._v("Lax 模式,  就宽松一点, 但是 只能在 *"),_("strong",[v._v("get 方法请求 提交 表单")]),v._v(" 或者")]),v._v(" "),_("p",[v._v("*"),_("strong",[v._v("a 标签发送情求")]),v._v("  的 情况下 可以带上 Cookie， 其他情况 均不能")])]),v._v(" "),_("li",[_("p",[v._v("None 模式, 也就是 默认模式,  请求 会 自动携带 上 Cookie")])])])])])])])]),v._v(" "),_("li",[_("p",[v._v("验证 来源站点")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("这就需要 用到 请求头中的 两个字段  Origin 和 Referer")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Origin  只包含 域名信息")])]),v._v(" "),_("li",[_("p",[v._v("Referer:  包含了 *"),_("strong",[v._v("具体")]),v._v(" 的 URL 路径")])]),v._v(" "),_("li",[_("p",[v._v("当然这两者 都是 可以 伪造的, 通过 Ajax(???) 中 自定义 请求头 即可， 安全性 较差")])])])])])]),v._v(" "),_("li",[_("p",[v._v("CSRF Token")]),v._v(" "),_("ul",[_("li",[v._v("Django作为 Python 的一门后端框架，用它开发过的同学就知道，在它的模板(template)中, 开发表单时，经常会附上这样一行代码:")])]),v._v(" "),_("p",[v._v("{% csrf %}")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("原理")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("首先 浏览器 会向 服务器 发送请求,服务器生成 一个 字符串, 将其 植入到 返回的 页面中")])]),v._v(" "),_("li",[_("p",[v._v("然后 浏览器 如果 要发送 请求, 就必须 带上 这个 字符串, 然后 服务器 来验证 是否合法.")]),v._v(" "),_("p",[v._v("如果 不合法 则 不与 响应.  这个字符串 也就是 CSRF Token")]),v._v(" "),_("p",[v._v("通常 第三方站点 无法拿到 这个 Token， 因此 也就是 被服务器 拒绝")])])])])])])])]),v._v(" "),_("li",[_("p",[v._v("总结")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("CSRF :  即 跨站请求 伪造,  指的 黑客 诱导 用户 点击链接, 打开黑客的 网站,")]),v._v(" "),_("p",[v._v("然后 黑客 利用  用户 当前的 登陆状态 发起 跨站请求")])]),v._v(" "),_("li",[_("p",[v._v("csrf 攻击 一般 有三种 方式：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("自动 get 请求")])]),v._v(" "),_("li",[_("p",[v._v("自动 post 请求")])]),v._v(" "),_("li",[_("p",[v._v("诱导点击 发送 GET 请求")])])])]),v._v(" "),_("li",[_("p",[v._v("防范措施")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("利用 cookie 的 SameSite 属性")])]),v._v(" "),_("li",[_("p",[v._v("验证站点 来源")])]),v._v(" "),_("li",[_("p",[v._v("CSRF Token")])])])])])])]),v._v(" "),_("h2",{attrs:{id:"https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[v._v("#")]),v._v(" https")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("HTTPS为什么让数据传输更安全？")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("HTTP 的 特性是 明文传输, 因此 在传输的 每一个环节, 数据 都有可能 被第三方 窃取 和 篡改")])]),v._v(" "),_("li",[_("p",[v._v("HTTP 数据 经过 TCP 层, 然后 经过 WIFI 路由器, 运营商 和 目标 服务器")]),v._v(" "),_("ul",[_("li",[v._v("这些 缓解都可以被 中间人 拿到 数据 并进行 篡改 ,也就是我们 说的 中间人攻击")])])])])]),v._v(" "),_("li",[_("p",[v._v("引入 新的 加密方案,  HTTPS")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("HTTPS 并不是 一个新的 协议, 而是 加强版的 HTTP。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("其原理是 在 HTTP 和 TCP 之间建立 了 一个 中间层， 当 HTTP 和 TCP 通信时 并不像 以前那样的 直接 通信。")])]),v._v(" "),_("li",[_("p",[v._v("直接 经过了 一个 *"),_("strong",[v._v("中间层")]),v._v(" 进行加密, 将加密 后 的 数据包 传给 TCP 响应的")])]),v._v(" "),_("li",[_("p",[v._v("TCP 必须将 数据包 解密, 才能传给 上面的 HTTP。")])]),v._v(" "),_("li",[_("p",[v._v("这个 中间层 也叫  *"),_("strong",[v._v("安全层")]),v._v("  安全层的 核心 就是  对数据 加密")])])])])])]),v._v(" "),_("li",[_("p",[v._v("HTTPS 是 如何实现 加密的")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("对称加密 和 非对称加密")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("概念")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("对称加密 是 最简单的 方式， 指的 是 加密 和 解密 用的是 同样的 密匙")])]),v._v(" "),_("li",[_("p",[v._v("非对称加密  如果 有 A，B 两把 钥匙,  如果 用 A 加密过的 数据包 只能 用 B 解密")]),v._v(" "),_("p",[v._v("反之,  如果 用 B 加密 的 数据包 只能 用 A 解密")])])])]),v._v(" "),_("li",[_("p",[v._v("加解密的过程")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("来 谈谈 浏览器 和 服务器 进行 协商 解密的 过程")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("首先, 浏览器 会给 服务器 发送一个随机数 client_random  和 一个 加密的 方法 列表")])]),v._v(" "),_("li",[_("p",[v._v("服务器 接受 后 给 浏览器 返回  另一个 随机数  server_random  和 加密方法")])]),v._v(" "),_("li",[_("p",[v._v("现在 两者 拥有 三样 相同的 凭证： client_random,  server_random 和 加密方法")])]),v._v(" "),_("li",[_("p",[v._v("接着 用 *"),_("strong",[v._v("这个加密方法")]),v._v("  将 两个 随机数  混合起来 生成 密匙")])]),v._v(" "),_("li",[_("p",[v._v("这个 密匙 就是 浏览器 和 服务端通信的  *"),_("strong",[v._v("暗号")])])])])])])]),v._v(" "),_("li",[_("p",[v._v("各自应用的效果")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("采用 对称加密的 方式")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("那么 第三方 可以 在 中间 获取到 client_random, server_random, 和 加密方法，")])]),v._v(" "),_("li",[_("p",[v._v("由于 这个 加密方法 同时 可以 解密, 所以 呢 中间人 可以成功 对 暗号 进行 解密")])]),v._v(" "),_("li",[_("p",[v._v("拿到 数据,  很容易 就将 这种加密方式 破解了")])])])]),v._v(" "),_("li",[_("p",[v._v("采用非对称 (稍后就来)")]),v._v(" "),_("ul",[_("li",[v._v("理论上是可以的，但实际上非对称加密需要的计算量非常大，对于稍微大一点的数据即使用最快的处理器也非常耗时")])])])])]),v._v(" "),_("li",[_("p",[v._v("对称加密 和非对称加密  结合")])])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("+   流程\n\n    1.  浏览器 向服务器 发送 client_random  和 加密方法 列表\n\n    2.  服务器 接收到,  返回 server_random  加密方法 和  公匙\n\n    3.  浏览器  接收到， 接着 生成 另一个 随机数 pre_random， ***并且 用 公匙 加密， 传给服务器**\n\n    4.  服务器 用 ***私钥** 解密 这个 解密 这个 被加密 后的 pre_random\n\n\n    -  现在 浏览器 和 服务器  有三样 相同的 凭证:  client_random, server_random, 和 pre_random\n\n       然后 两者 用 相同的 加密方法 混合 这三个随机数, 生成 最终的 ***密匙**\n\n    -   然后  浏览器 和 服务器 尽管 用 一样的 密匙 进行 通信, 即 使用 对称加密\n\n\n    -   这个 最终的 密匙 是很难 被 中间人 拿到的, why？\n\n        +  因为 中间人 没有  ***私 钥**  从而拿不到 pre_random\n\n        +  也无法 生成 最终的 密匙了\n\n    -   回头比较一下和单纯的使用非对称加密, 这种方式做了什么改进呢？\n\n        +  本质是 防止了 私 钥 加密的数据 外 传\n\n        +  单独使用 非对称 加密, 最大的漏洞在于 *** 服务器传数据给浏览器 只能 用 私 钥**加密, 这是 危险的 根源。\n")])])]),_("ul",[_("li",[_("p",[v._v("添加数字证书")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("传输过程")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("浏览器 给 服务器 发送  client_random 和 加密方法列表")])]),v._v(" "),_("li",[_("p",[v._v("服务器 给 浏览器 发送  server_random, 加密方法 和 数字证书(CA)")])]),v._v(" "),_("li",[_("p",[v._v("浏览器 验证 CA 的 有效性, 通过 用 CA 中的 公匙 去 加密, 浏览器 生成的 pre_random")])]),v._v(" "),_("li",[_("p",[v._v("然后发送给 服务器")])]),v._v(" "),_("li",[_("p",[v._v("服务器 接收到 pre_random， 用 私 钥 解密,")])]),v._v(" "),_("li",[_("p",[v._v("之后呢 用 client_random, server_random， pre_random 三者 生成 一个 secret 密匙")])]),v._v(" "),_("li",[_("p",[v._v("(少了) 服务器确认")])]),v._v(" "),_("li",[_("p",[v._v("(少了)  浏览器  也用  client_random, server_random, pre_random 生成 一个 secret 密匙")])]),v._v(" "),_("li",[_("p",[v._v("之后 双方 就 通过  secret 密匙 加密  通信。")])])])]),v._v(" "),_("li",[_("p",[v._v("认证过程(CA 里的 Hash函数) 记得看")])])])])])])])])]),v._v(" "),_("h2",{attrs:{id:"风控策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#风控策略"}},[v._v("#")]),v._v(" 风控策略")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("美团 (复杂风控场景下，如何打造一款高效的规则引擎)")]),v._v(" "),_("ul",[_("li",[v._v("(https://tech.meituan.com/2020/05/14/meituan-security-zeus.html)")])])])]),v._v(" "),_("h2",{attrs:{id:"可信前端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可信前端"}},[v._v("#")]),v._v(" 可信前端")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("0x00 前言  (https://www.freebuf.com/articles/web/102269.html)")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("在信息安全领域，可信系统（Trusted system）是一个让人心动的目标，它指的是一个通过实施特定的安全策略而达到一定可信程度的系统。")])]),v._v(" "),_("li",[_("p",[v._v('在我们的web系统中，想打造一个可信系统似乎是个伪命题，"永远不要相信客户端的输入"是基本的安全准则')]),v._v(" "),_("ul",[_("li",[_("p",[v._v("维基上对其的解释为：“可信的”（Trusted）未必意味着对用户而言是“值得信赖的”（Trustworthy）")])]),v._v(" "),_("li",[_("p",[v._v("它意味着可以充分相信其行为会更全面地遵循设计，而执行设计者和软件编写者所禁止的行为的概率很低")])])])])])]),v._v(" "),_("li",[_("p",[v._v("可信 前端")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("TPM的一个重要作用就是鉴别消息来源的真实性，保障终端的可信。")])]),v._v(" "),_("li",[_("p",[v._v("随着撞库、恶意注册、薅羊毛等产业的蓬勃发展，在越来越多的场景我们需要鉴别请求数据是否来自真实的用户，保护真实用户的数据安全")])]),v._v(" "),_("li",[_("p",[v._v("首要问题就是需要保证输入数据安全")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("前端作为数据采集的最前线，js代码始终暴露在外，在这种情况下，防止恶意伪造请求变得非常困难，可信前端也就成了无稽之谈")]),v._v(" "),_("ol",[_("li",[v._v("为什么需要js混淆")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("是为了保护我们的前端代码逻辑。")])]),v._v(" "),_("li",[_("p",[v._v("uglify、compressor、clouser等等它们的工作主要集中在")])])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v(" +   合并多个js文件\n +   去除js代码里面的空格和换行\n +    压缩js里面的变量名\n +   剔除注释\n")])])]),_("ul",[_("li",[_("p",[v._v("虽然压缩工具出发点都是为了减少js文件的体积，")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("但是人们发现压缩后的代码已经比源代码可读性差了很多，")]),v._v(" "),_("p",[v._v("间接起到了代码保护的作用，于是压缩js文件成为了前端发布的标配之一")])]),v._v(" "),_("li",[_("p",[v._v("但是后来市面上主流浏览器chrome、Firefox等都提供了js格式化的功能")]),v._v(" "),_("p",[v._v("单纯压缩过的js代码对于真正怀有恶意的人，已经不能起到很好的防御工作")])])])])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("p",[v._v("js混淆是不是纸老虎")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("其实正是因为js传输的就是源代码，我们才需要进行混淆保护")])]),v._v(" "),_("li",[_("p",[v._v("在高强度的攻防中，可以大大增加破解者的工作量，起到防御作用。从这个角度来讲，关键代码进行混淆是必不可少的步骤。")])])])]),v._v(" "),_("li",[_("p",[v._v("如何进行js混淆")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("js混淆器大致有两种:")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("通过正则替换实现的混淆器")])]),v._v(" "),_("li",[_("p",[v._v("通过语法树替换实现的混淆器")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("第二种  实现成本较高，但是更灵活，而且更安全，更适合对抗场景")])]),v._v(" "),_("li",[_("p",[v._v("名词解释")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("token:  词法单元, 词法 分析器的 产物， 文本流被 分割成 后的 最小单位")])]),v._v(" "),_("li",[_("p",[v._v("AST:  抽象语法树, 语法分析器的 产物, 是 源代码的 抽象 语法 结构的 树状 表现形式")])]),v._v(" "),_("li",[_("p",[v._v("编译器的工作流程：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("字符流")])]),v._v(" "),_("li",[_("p",[v._v("词法分析器 (符号流)")])]),v._v(" "),_("li",[_("p",[v._v("语法分析  (语法树)")])]),v._v(" "),_("li",[_("p",[v._v("语义分析 (语法树)")])]),v._v(" "),_("li",[_("p",[v._v("中间代码 生成 器 (中间代码表示)")])]),v._v(" "),_("li",[_("p",[v._v("机器无关的 代码的 优化器 (中间代码表示)")])]),v._v(" "),_("li",[_("p",[v._v("代码生成 器")])]),v._v(" "),_("li",[_("p",[v._v("目标 机器 语言")])])])]),v._v(" "),_("li",[_("p",[v._v("混淆 器的 工作 流程")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("词法 分析器(符号流)")])]),v._v(" "),_("li",[_("p",[v._v("语法 分析 (语法树)")])]),v._v(" "),_("li",[_("p",[v._v("语义 分析 (语法树)")])]),v._v(" "),_("li",[_("p",[v._v("*"),_("strong",[v._v("修改 语法树")]),v._v(" (语法树)")])]),v._v(" "),_("li",[_("p",[v._v("代码生成器")])]),v._v(" "),_("li",[_("p",[v._v("字符流")])])])]),v._v(" "),_("li",[_("p",[v._v("通过修改AST生成一个新的AST，新的AST就可以对应新的JavaScript代码")])])])])])])])])])])])]),v._v(" "),_("li",[_("p",[v._v("规则设计")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("我们需要生成新的AST结构意味着会生成和源代码不一样的js代码，")]),v._v(" "),_("p",[v._v("但是我们的混淆是不能破坏原有代码的执行结果的")])])])]),v._v(" "),_("li",[_("p",[v._v("实现")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("比如其实v8就是一个，")])]),v._v(" "),_("li",[_("p",[v._v("还有\bmozilla的SpiderMonkey,")])]),v._v(" "),_("li",[_("p",[v._v("知名的esprima等等，")])]),v._v(" "),_("li",[_("p",[v._v("我这里要推荐的是 uglify，一个基于nodejs的解析器。它具有以下功能")])])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("+   parser，把 JavaScript 代码解析成抽象语法树\n\n+   code generator，通过抽象语法树生成代码\n\n+   scope analyzer，分析变量定义的工具\n\n+   tree walker，遍历树节点\n\n+   tree transformer，改变树节点\n")])])]),_("ul",[_("li",[v._v("体会一下  6666")])])]),v._v(" "),_("li",[_("p",[v._v("不懂不懂 (https://time.geekbang.org/column/article/192236)")])])])])])])]),v._v(" "),_("h2",{attrs:{id:"前端-服务端-安全策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前端-服务端-安全策略"}},[v._v("#")]),v._v(" 前端 - 服务端 安全策略")])])}),[],!1,null,null,null);_.default=s.exports}}]);